{"version":3,"sources":["src/state.js","src/index.js"],"names":["createWatcher","watchExpression","listener","state","value","oldValue","run","newState","newValue","State","initial","watchers","watcher","push","forEach","appState","foo","el","document","querySelector","watch","textContent","addEventListener","digest"],"mappings":";AA8BG,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EA9BH,SAASA,EAAcC,EAAiBC,EAAUC,GAC5CC,IAAAA,EAAQH,EAAgBE,GAC5BD,EAASE,EAAO,KAAMD,GAElBE,IAAAA,EAAWD,EAER,MAAA,CACLE,IAAIC,SAAAA,GACIC,IAAAA,EAAWP,EAAgBM,GACjCL,EAASM,EAAUH,EAAUE,GAE7BF,EAAWG,IAmBd,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAdUC,IAAAA,EAAAA,WACCC,SAAAA,EAAAA,GAAS,EAAA,KAAA,GACdP,KAAAA,MAAQO,EACRC,KAAAA,SAAW,GAWjB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QARD,MAAA,SAAMC,EAASV,GACRS,KAAAA,SAASE,KAAKb,EAAcY,EAASV,EAAU,KAAKC,UAO1D,CAAA,IAAA,SAJD,MAAA,WAAS,IAAA,EAAA,KACFQ,KAAAA,SAASG,QAAQ,SAACF,GACrBA,EAAQN,IAAI,EAAKH,aAEpB,EAdUM,GAcV,QAAA,MAAA;;ACTF,aArBD,IAAA,EAAA,QAAA,WAEMM,EAAW,IAAIN,EAAJ,MAAU,CACzBO,IAAK,gBAGDC,EAAKC,SAASC,cAAc,QAE9BF,IACFF,EAASK,MACP,SAACjB,GAAUA,OAAAA,EAAMa,KACjB,SAACA,GACCC,EAAGI,YAAcL,IAKrBC,EAAGK,iBAAiB,QAAS,WAC3BP,EAASZ,MAAMa,IAAM,sBACrBD,EAASQ","file":"src.d6538dcd.js","sourceRoot":"..","sourcesContent":["function createWatcher(watchExpression, listener, state) {\n  let value = watchExpression(state);\n  listener(value, null, state);\n\n  let oldValue = value;\n\n  return {\n    run(newState) {\n      const newValue = watchExpression(newState);\n      listener(newValue, oldValue, newState);\n      // store old value within the closure\n      oldValue = newValue;\n    }\n  };\n}\n\nexport class State {\n  constructor(initial) {\n    this.state = initial;\n    this.watchers = [];\n  }\n\n  watch(watcher, listener) {\n    this.watchers.push(createWatcher(watcher, listener, this.state));\n  }\n\n  digest() {\n    this.watchers.forEach((watcher) => {\n      watcher.run(this.state);\n    });\n  }\n}\n","import { State } from \"./state\";\n\nconst appState = new State({\n  foo: \"this is foo\"\n});\n\nconst el = document.querySelector(\"#foo\");\n\nif (el) {\n  appState.watch(\n    (state) => state.foo,\n    (foo) => {\n      el.textContent = foo;\n    }\n  );\n\n  // now we can update state in event listeners and the UI updates automatically\n  el.addEventListener(\"click\", () => {\n    appState.state.foo = \"this is another foo\";\n    appState.digest();\n  });\n}\n"]}